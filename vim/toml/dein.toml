[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
    let g:winresizer_vert_resize = 1
    let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
    let g:autodate_lines=20
    let g:autodate_keyword_pre='Last Change : '
    let g:autodate_format="%a %d %b %Y %H:%M:%S"
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    nmap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

    :command Run QuickRun
    let g:quickrun_config = {
        "_" : {
            "outputter/buffer/split" : ":botright 8sp",
            "outputter/buffer/close_on_empty" : 1,
            "outputter/error/error" : "quickfix",
            "outputter/error/success" : "buffer",
            "outputter/buffer/into" : 1,
            "outputter" : "error",
        }
    }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
    " ctrl + /で選択行のコメントアウト
    nmap <C-_> <Plug>(caw:hatpos:toggle)
    vmap <C-_> <Plug>(caw:hatpos:toggle)
    " imap <C-_> <esc><Plug>(caw:hatpos:toggle)<S-$>a
'''

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'tomasr/molokai'
 
[[plugins]]
repo = 'w0ng/vim-hybrid'
 
[[plugins]]
repo = 'phanviet/vim-monokai-pro'
 
[[plugins]]
repo = 'reedes/vim-colors-pencil'
 
[[plugins]]
repo = 'benjaminwhite/Benokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    colorscheme iceberg
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hoock_add = '''
    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
        exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
        exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    endfunction
    call NERDTreeHighlightFile('py',     'cyan',    'none', 'cyan',    '#151515')
    call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
    call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
    call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
    call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
    call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
    call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
    call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')

    nmap <silent><C-t> :NERDTreeToggle<CR>

    " autocmd StdinReadPre * let s:std_in=1
    " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    " autocmd VimEnter * if  argc() != 0 && !exists("s:std_in") | NERDTree | endif

    " 隠しファイルをデフォルトで表示
    " let NERDTreeShowHidden = 1
    let NERDTreeShowBookmarks = 1

'''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc']

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['vimproc', 'unite.vim']

[[plugins]]
repo = 'Shougo/deoplate.nvim'
on_i = 1
hook_add = '''
    let g:deoplate#enable_at_startup = 1
    if !exists('g:deoplete#omni#input_patterns')
        let g:deoplete#omni#input_patterns = {}
    endif
    let g:deoplete#omni#functions = {}
    " let g:deoplete#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
    " let g:deoplete#omni#functions.python = 'jedi#completions'
    inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['vimproc', 'unite.vim', 'unite-outline']

[[plugins]]
repo = 'popkirby/lightline-iceberg'
hook_add = '''
    let g:lightline = {
        'colorscheme': 'srcery_drk',
        'mode_map': {'c': 'NORMAL'},
        'active': {
            'left': [ [ 'mode', 'paste' ], ['filetype'] , ['fileencoding']],
            'right': [ ['percent'], ['lineinfo'], ['fugitive', 'fileformat'] ]
        },
        'component_function': {
            'modified': 'LightlineModified',
            'readonly': 'LightlineReadonly',
            'fugitive': 'LightlineFugitive',
            'filename': 'LightlineFilename',
            'fileformat': 'LightlineFileformat',
            'filetype': 'LightlineFiletype',
            'fileencoding': 'LightlineFileencoding',
            'mode': 'LightlineMode',
        },
    }
    let g:lightline.tabline={
        'filename': 'tabs'
    }
    let g:lightline.tab={
        'active': ['tabnum', 'filename', 'modified'],
        'inactive': ['tabnum', 'filename', 'modified']
    }

    function! LightlineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineFilename()
        return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
               (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                &ft == 'unite' ? unite#get_status_string() :
                &ft == 'vimshell' ? vimshell#get_status_string() :
                '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction

    function! LightlineFugitive()
        if exists('*fugitive#head')
            let branch = fugitive#head()
            return branch != '' ? "\u2b60 ".branch : ''
        endif
    endfunction

    " function! LightlineFugitive()
    "   if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    "     return "\u2b60 ".fugitive#head()
    " else
    "     return '-'
    "   endif
    " endfunction

    function! LightlineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
'''
